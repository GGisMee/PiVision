<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Mobil Dashboard</title>
    <script src="https://kit.fontawesome.com/70c8e77483.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <script>
        // SocketIO and Canvas setup
        let socket;
        let canvas;
        let ctx;
        let vehicles = [];
        let animationFrameId = null;
        const ANIMATION_DURATION = 1000; // 1 second between updates

        // Vehicle class for better object management
        class Vehicle {
            constructor(id, x, y, dx, dy, color) {
                this.id = id;
                this.startX = x;
                this.startY = y;
                this.targetX = x;
                this.targetY = y;
                this.dx = dx;
                this.dy = dy;
                this.color = color || "#CCCCCC"; // Default gray color
                this.animationStartTime = Date.now();
            }

            // Update vehicle target position
            update(x, y, dx, dy, color) {
                const now = Date.now();
                const elapsedTime = now - this.animationStartTime;
                const progress = Math.min(1, elapsedTime / ANIMATION_DURATION);
                
                // If previous animation was complete, use target as start
                if (progress >= 1) {
                    this.startX = this.targetX;
                    this.startY = this.targetY;
                } else {
                    // Calculate current position for smooth transition
                    const easedProgress = getEasedProgress(progress);
                    this.startX = this.startX + (this.targetX - this.startX) * easedProgress;
                    this.startY = this.startY + (this.targetY - this.startY) * easedProgress;
                }
                
                // Update properties
                this.targetX = x;
                this.targetY = y;
                this.dx = dx;
                this.dy = dy;
                if (color) this.color = color;
                this.animationStartTime = now;
            }

            // Draw vehicle on canvas
            draw(ctx, progress) {
                const easedProgress = getEasedProgress(progress);
                
                // Calculate current position
                const x = this.startX + (this.targetX - this.startX) * easedProgress;
                const y = this.startY + (this.targetY - this.startY) * easedProgress;
                
                // Draw vehicle body
                ctx.save();
                ctx.translate(x, y);
                
                // Car body with rounded corners
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.roundRect(-20, -40, 40, 80, 8);
                ctx.fill();
                
                // Windows
                ctx.fillStyle = "lightblue";
                ctx.beginPath();
                ctx.roundRect(-15, -30, 30, 15, 4);
                ctx.fill();
                
                ctx.restore();
                
                // Draw direction arrow
                this.drawArrow(ctx, x, y);
            }
            
            // Draw direction arrow
            drawArrow(ctx, x, y) {
                if (!this.dx && !this.dy) return; // No direction to draw
                
                const angle = Math.atan2(this.dy, this.dx);
                const arrowLength = 40; // Length of the arrow
                
                // Arrow line
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + this.dx * arrowLength, y + this.dy * arrowLength);
                ctx.strokeStyle = "red";
                ctx.lineWidth = 2;
                ctx.stroke();
                
                // Arrowhead
                const headSize = 10;
                ctx.beginPath();
                ctx.moveTo(x + this.dx * arrowLength, y + this.dy * arrowLength);
                ctx.lineTo(
                    x + this.dx * arrowLength - headSize * Math.cos(angle - Math.PI/6),
                    y + this.dy * arrowLength - headSize * Math.sin(angle - Math.PI/6)
                );
                ctx.lineTo(
                    x + this.dx * arrowLength - headSize * Math.cos(angle + Math.PI/6),
                    y + this.dy * arrowLength - headSize * Math.sin(angle + Math.PI/6)
                );
                ctx.closePath();
                ctx.fillStyle = "red";
                ctx.fill();
            }
        }

        // Get eased progress for smoother animations (quadratic easing)
        function getEasedProgress(progress) {
            return progress < 0.5 
                ? 2 * progress * progress 
                : 1 - Math.pow(-2 * progress + 2, 2) / 2;
        }

        // Initialize SocketIO connection
        function initializeSocket() {
            socket = io();
            
            // Listen for dashboard updates
            socket.on('update', function(data) {
                document.getElementById("d_front").innerText = data["d_front"];
                document.getElementById("time").innerText = data["time"];
                document.getElementById("num_now").innerText = data["num_now"];
                document.getElementById("d_close").innerText = data["d_close"];
                updateStatus(data.status);
                console.log('Dashboard data received', data);
            });
            
            // Listen for vehicle updates (new format)
            socket.on('vehicle_update', function(data) {
                processVehicleData(data.vehicles);
            });
            
            // Listen for log messages
            socket.on('log', function(text) {
                console.log(text);
            });
            
            // Listen for battery updates
            socket.on('battery_update', function(data) {
                updateBatteryIcon(data.level);
            });
            
            // Status update listener
            socket.on('status_update', function(data) {
                console.log("Status update received:", data);
                // Additional handling if needed
            });
        }
        
        // Update battery icon based on level
        function updateBatteryIcon(level) {
            var batteryIcon = document.getElementById("batteryIcon");
            console.log("Battery data received ", level);

            batteryIcon.classList.remove(
                "fa-battery-full", 
                "fa-battery-half", 
                "fa-battery-quarter", 
                "fa-battery-empty"
            );
            
            if (level > 75) {
                batteryIcon.classList.add("fa-battery-full");
            } else if (level > 50) {
                batteryIcon.classList.add("fa-battery-half");
            } else if (level > 25) {
                batteryIcon.classList.add("fa-battery-quarter");
            } else {
                batteryIcon.classList.add("fa-battery-empty");
            }
        }

        // Process vehicle data from server
        function processVehicleData(vehicleData) {
            if (!vehicleData) return;
            
            const now = Date.now();
            const vehicleIds = vehicleData.map(v => v.id);
            
            // Remove vehicles that are no longer present
            vehicles = vehicles.filter(v => vehicleIds.includes(v.id));
            
            // Update existing vehicles or create new ones
            vehicleData.forEach(data => {
                const existingVehicle = vehicles.find(v => v.id === data.id);
                
                if (existingVehicle) {
                    // Update existing vehicle
                    existingVehicle.update(data.x, data.y, data.dx, data.dy, data.color);
                } else {
                    // Create new vehicle
                    vehicles.push(new Vehicle(
                        data.id, 
                        data.x, 
                        data.y, 
                        data.dx, 
                        data.dy, 
                        data.color
                    ));
                }
            });
            
            // Start animation if not already running
            if (!animationFrameId) {
                animateVehicles();
            }
        }

        // Animate vehicles on canvas
        function animateVehicles() {
            const now = Date.now();
            
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw each vehicle
            let activeTweens = false;
            
            for (const vehicle of vehicles) {
                const elapsedTime = now - vehicle.animationStartTime;
                const progress = Math.min(1, elapsedTime / ANIMATION_DURATION);
                
                vehicle.draw(ctx, progress);
                
                // Check if animation is still active
                if (progress < 1) {
                    activeTweens = true;
                }
            }
            
            // Continue animation loop if needed
            if (activeTweens) {
                animationFrameId = requestAnimationFrame(animateVehicles);
            } else {
                animationFrameId = null;
            }
        }

        // Update status indicators
        function updateStatus(status) {
            let color;
            if (status <= 3) {
                color = '#90ee90';
            } else if (status <= 6) {
                color = '#f5f575';
            } else {
                color = '#ff5252';
            }
            console.log("Status update:", status, color);
            let indicators = document.getElementsByClassName("indicator");

            // Loopa igenom och sätt färg
            for (let i = 0; i < indicators.length; i++) {
                indicators[i].style.backgroundColor = 8-i < status ? color : "rgb(111, 111, 111)";
            }
        }

        // Toggle system state (start/stop)
        function toggleButton_f() {
            var button = document.getElementById("toggleButton");
            var currentState = button.getAttribute("data-state");

            if (currentState === "start") {
                button.setAttribute("data-state", "stop");
                button.innerText = "Stop";
                button.style.backgroundColor = "lightcoral";
                socket.emit("toggle", { action: "start" });
            } else {
                button.setAttribute("data-state", "start");
                button.innerText = "Start";
                button.style.backgroundColor = "lightgreen";
                socket.emit("toggle", { action: "stop" });
            }
        }

        // Send div dimensions to server
        function sendDivArea() {
            var div = document.getElementById("car_content");
            if (!div) return;

            var width = div.offsetWidth;
            var height = div.offsetHeight;

            console.log("Width: " + width + " Height: " + height);
            socket.emit("div_area", { width: width, height: height });
        }

        // Initialize canvas
        function initializeCanvas() {
            canvas = document.getElementById("carCanvas");
            if (!canvas) return;
            
            canvas.height = 350; // height - 2*padding
            canvas.width = 280;  // width - 2*padding
            ctx = canvas.getContext("2d");
            console.log('Canvas initialized', canvas.width, canvas.height);
        }

        // Initialize application
        window.onload = function() {
            initializeSocket();
            initializeCanvas();
            sendDivArea();
            
            // Handle window resize
            window.addEventListener("resize", sendDivArea);
        };
    </script>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Archivo:wght@100..900&display=swap" rel="stylesheet">
    <style>
        body { 
            font-family: "Archivo", sans-serif;
            display: flex; 
            height: 100vh; 
            margin: 0; 
            background-color: #E7E7E7; 
        }
        .container { 
            display: flex; 
            flex: 1;
            gap: 20px;
            padding: 10px;
            box-sizing: border-box;
            align-items: stretch;
        }
        .column { 
            display: flex; 
            flex-direction: column; 
            gap: 10px; 
            height: 100%;

        }
        .side {
            flex:2;
            
        }
        .middle { 
            flex: 4;
        }
        .box { 
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: #252525;
            color: white;
            padding: 20px;
            border-radius: 20px;
            flex: 1;
            text-align: center;
        }

        .box .header {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            font-size: 2em;
        }
        .box .divider {
            width: 100%;
            height: 2px;
            background-color: white;
            margin: 20px 0;
        }
        .box .content {
            font-size: 2em;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .box .icon i,
        .box .icon img {
            height: 1em;
            width: auto;
            vertical-align: middle;
        }
        
        
        @media (max-width: 430px) {
            .container { flex-direction: column; gap: 40px; padding: 40px; }
            .box { font-size: 2em; padding: 30px; }
        }

        .sidebar {
            width: 80px;
            background-color: #252525;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 10px;
        }

        .battery-icon {
            padding: 20px;
            font-size: 40px; /* Adjust font size for better visibility */
            width: auto;
            vertical-align: middle;
            margin: 0; /* Remove margin */
            text-align: center; /* Center the icon horizontally */
            align-self: flex-start; /* Align it at the top */
            display: flex;
            justify-content: center; /* Center the icon horizontally */
        }

        #toggleButton {
            width: 70%;  /* Narrow width */
            height: 30%; /* Increased height */
            font-size: 20px;
            font-weight: bold;
            border: none;
            border-radius: 30px;  /* Rounded corners */
            cursor: pointer;
            background-color: lightgreen;
            writing-mode: vertical-rl; /* Rotate text */
            text-orientation: mixed;  /* Ensure proper text orientation */
            display: flex;
            align-items: center;
            justify-content: center;
            text-transform: uppercase;
            transition: background-color 0.3s ease-in-out, transform 0.1s;
        }

        #sidebar_other_content {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #battery_container{
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .indicator {
            height: 100%;
            padding: 15px;
            aspect-ratio: 1;
            margin:2px;
            border-radius: 10px;
            background-color: rgb(111, 111, 111);
        }
        .indicator.active {
            background-color: #ff5252;
        }

    </style>
</head>
<body>
    <div class="container">
        <div class="column side">
            <div class="box">
                <div class="header">
                    <span class="title">Avstånd fram</span>
                    <span class="icon"><i class="fas fa-ruler"></i></span>
                </div>
                <span class="divider"></span>
                <div id="d_front" class="content">{{ data["d_front"] }}{% if data["d_front"] != '-' %} m{% endif %}</div>
            </div>
            <div class="box">
                <div class="header">
                    <span class="title">Avstånd Nära</span>
                    <span class="icon"><i class="fas fa-ruler"></i></span>
                </div>
                <span class="divider"></span>
                <div id="d_close" class="content">{{ data["d_close"]}}{% if data["d_front"] != '-' %} m{% endif %}</div>
            </div>
            
        </div>
        <div class="column">
            <div class="box" id="ind_box">
                    {% for i in range(9) %}
                        <div class="indicator" id="box{{ i }}"></div>
                    {% endfor %}
                </div>
            </div>
        <div class="column middle">
            <div class="box" id="car_content">
                <canvas id="carCanvas"></canvas>  
            </div>
            
        </div>
        <div class="column side">
            <div class="box">
                <div class="header">
                    <span class="title">Antal Nu</span>
                    <span class="icon"><img src="{{ url_for('static', filename='cars_icon.png') }}" alt="Cars Icon" width="30"></span>
                </div>
                <span class="divider"></span>
                <div id="num_now" class="content">{{data["num_now"]}}</div>
            </div>
        <div class="box">
            <div class="header">
                <span class="title">Tid</span>
                <span class="icon"><i class="fa-regular fa-clock"></i></span>
            </div>
            <span class="divider"></span>
            <div id="time" class="content">{{ data["time"] }}</div>
        </div>
    </div>
</div>
<div class="sidebar">
    <!-- Battery Icon -->
     <div id="battery_container">
        <div id="batteryIcon" class="battery-icon">
            <i class="fas fa-battery-full"></i> <!-- Default icon -->
        </div>
    </div>
    <div id='sidebar_other_content'>
        <button id="toggleButton" onclick="toggleButton_f()" data-state="start">Start</button>
    </div>
</div>
<button onclick="updateStatus(0)">Test Indicators</button>
</body>