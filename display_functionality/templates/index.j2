<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Mobil Dashboard</title>
    <script src="https://kit.fontawesome.com/70c8e77483.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <script>
        var socket = io();

        // Lyssna efter uppdateringar från servern
        socket.on('update', function(data) {
            document.getElementById("d_front").innerText = data["d_front"];
            document.getElementById("time").innerText = data["time"];
            document.getElementById("num_now").innerText = data["num_now"];
            document.getElementById("d_close").innerText = data["d_close"];
            updateStatus(data.status);
            console.log('Data received', data);
        });

        socket.on('log', function(text) {
            console.log(text);
        });

        // Lyssna efter batteristatus
        socket.on('battery_update', function(data) {
            var batteryIcon = document.getElementById("batteryIcon");
            console.log("Battery data received ", data.level);

            if (data.level > 75) {
                batteryIcon.classList.add("fa-battery-full");
                batteryIcon.classList.remove("fa-battery-half", "fa-battery-quarter", "fa-battery-empty");
            } else if (data.level > 50) {
                batteryIcon.classList.add("fa-battery-half");
                batteryIcon.classList.remove("fa-battery-full", "fa-battery-quarter", "fa-battery-empty");
            } else if (data.level > 25) {
                batteryIcon.classList.add("fa-battery-quarter");
                batteryIcon.classList.remove("fa-battery-full", "fa-battery-half", "fa-battery-empty");
            } else {
                batteryIcon.classList.add("fa-battery-empty");
                batteryIcon.classList.remove("fa-battery-full", "fa-battery-half", "fa-battery-quarter");
            }
        });

        function updateStatus(status) {
            let color;
            if (status <= 3) {
                color = '#90ee90';
            } else if (status <= 6) {
                color = '#f5f575';
            } else {
                color = '#ff5252';
            }
            document.querySelectorAll('.indicator').forEach((box, index) => {
                box.classList.toggle('active', index < status);
            });
        }

        function toggleButton_f() {
            var button = document.getElementById("toggleButton");
            var currentState = button.getAttribute("data-state");

            if (currentState === "start") {
                button.setAttribute("data-state", "stop");
                button.innerText = "Stop";
                button.style.backgroundColor = "lightcoral";
            socket.emit("toggle", { action: "start" });

            } else {
                button.setAttribute("data-state", "start");
                button.innerText = "Start";
                button.style.backgroundColor = "lightgreen";
            socket.emit("toggle", { action: "stop" });

            }
        }


        // Sends the size of the div to the server
        function sendDivArea() {
            var div = document.getElementById("car_content");
            if (!div) return;

            var width = div.offsetWidth;
            var height = div.offsetHeight;

            console.log("Width: " + width + " Height: " + height);
            // Skicka till servern med Socket.IO
            socket.emit("div_area", { width: width, height: height });
        }

        // Kör vid fönsterstorleksändring
        window.addEventListener("resize", sendDivArea);

        // Kör direkt vid sidans laddning
        window.onload =  function () {
            sendDivArea();
            setCanvas();
        }

        // canvas drawing
        let canvas;
        let ctx;
        function setCanvas() {
            canvas = document.getElementById("carCanvas");
            canvas.height = 350; // height - 2*padding
            canvas.width = 280; // width - 2*padding
            ctx = canvas.getContext("2d");
            console.log('Canvas', canvas)
        }
        let cars = [];
        let animationFrameId = null;
        
        // Animation settings - match exactly with server update time
        const ANIMATION_DURATION = 1000; // 1 second - matches server's time.sleep(1)
        
        
        function drawCar(x, y, color) {
            ctx.save();
            ctx.translate(x, y);
            
            // Car body with rounded corners - restored to original dimensions
            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.roundRect(-25, -50, 50, 100, 10);
            ctx.fill();
            
            // Windows
            ctx.fillStyle = "lightblue";
            ctx.beginPath();
            ctx.roundRect(-18, -40, 36, 20, 5);
            ctx.fill();
            
            // Removed wheels as requested
            
            ctx.restore();
        }

        function drawArrow(x, y, dx, dy) {
            let angle = Math.atan2(dy, dx);
            
            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.lineTo(x + dx * 5, y + dy * 5);
            ctx.strokeStyle = "red";
            ctx.lineWidth = 2;
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(x + dx * 5, y + dy * 5);
            ctx.lineTo(x + dx * 5 - 5 * Math.cos(angle - Math.PI / 6), y + dy * 5 - 5 * Math.sin(angle - Math.PI / 6));
            ctx.lineTo(x + dx * 5 - 5 * Math.cos(angle + Math.PI / 6), y + dy * 5 - 5 * Math.sin(angle + Math.PI / 6));
            ctx.lineTo(x + dx * 5, y + dy * 5);
            ctx.fillStyle = "red";
            ctx.fill();
        }
        
        function keepInBounds(value, min, max) {
            return Math.max(min, Math.min(max, value));
        }
        
        function animateCars(timestamp) {
            // Calculate how far we are through the animation (0-1)
            const elapsedTime = Date.now() - cars[0].animationStartTime;
            const progress = Math.min(1, elapsedTime / ANIMATION_DURATION);
            
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw each car at its interpolated position
            for (const car of cars) {
                // Use easing for smoother animation
                const easedProgress = progress < 0.5 
                    ? 2 * progress * progress 
                    : 1 - Math.pow(-2 * progress + 2, 2) / 2;
                
                // Calculate current position with interpolation
                const currentX = car.startX + (car.targetX - car.startX) * easedProgress;
                const currentY = car.startY + (car.targetY - car.startY) * easedProgress;
                

                // Draw car and its direction arrow
                drawCar(currentX, currentY, "lightgray");
                drawArrow(currentX, currentY, car.dx, car.dy);
            }
            
            // Continue animation if not complete
            if (progress < 1) {
                animationFrameId = requestAnimationFrame(animateCars);
            }
        }
        
    socket.on("new_points", function(data) {
    let points = JSON.parse(data)
    const now = Date.now();
    console.log(points)

    // If there are fewer points than cars, we need to pop cars from the array
    if (points.length < cars.length) {
        // Calculate how many cars to remove
        const carsToRemove = cars.length - points.length;

        // Remove cars that have been popped from the list
        cars.splice(cars.length - carsToRemove, carsToRemove);
    }

    // Initialize cars if it's the first update or if we added new points
    if (cars.length === 0 || points.length > cars.length) {
        cars = points.map(point => ({
            startX: point.x,
            startY: point.y,
            targetX: point.x,
            targetY: point.y,
            color:point.color
            id: point.id,
            dx: point.dx,
            dy: point.dy,
            animationStartTime: now
        }));
    } else {
        // Update car targets if no cars have been popped
        points.forEach((point, index) => {
            if (index < cars.length) {
                // Use current position as start point for next animation
                const elapsedTime = now - cars[index].animationStartTime;
                const progress = Math.min(1, elapsedTime / ANIMATION_DURATION);

                // If previous animation was complete, use target position
                if (progress >= 1) {
                    cars[index].startX = cars[index].targetX;
                    cars[index].startY = cars[index].targetY;
                } else {
                    const easedProgress = progress < 0.5 
                        ? 2 * progress * progress 
                        : 1 - Math.pow(-2 * progress + 2, 2) / 2;
                    
                    // Calculate current position
                    cars[index].startX = cars[index].startX + 
                        (cars[index].targetX - cars[index].startX) * easedProgress;
                    cars[index].startY = cars[index].startY + 
                        (cars[index].targetY - cars[index].startY) * easedProgress;
                }

                // Update target and direction
                cars[index].targetX = point.x
                cars[index].targetY = point.y
                cars[index].dx = point.dx;
                cars[index].dy = point.dy;

                // Reset animation timer
                cars[index].animationStartTime = now;
            }
        });
    }

    // Start new animation
    animationFrameId = requestAnimationFrame(animateCars);
});
    </script>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Archivo:wght@100..900&display=swap" rel="stylesheet">
    <style>
        body { 
            font-family: "Archivo", sans-serif;
            display: flex; 
            height: 100vh; 
            margin: 0; 
            background-color: #E7E7E7; 
        }
        .container { 
            display: flex; 
            flex: 1;
            gap: 20px;
            padding: 10px;
            box-sizing: border-box;
            align-items: stretch;
        }
        .column { 
            display: flex; 
            flex-direction: column; 
            gap: 10px; 
            height: 100%;

        }
        .side {
            flex:2;
            
        }
        .middle { 
            flex: 4;
        }
        .box { 
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: #252525;
            color: white;
            padding: 20px;
            border-radius: 20px;
            flex: 1;
            text-align: center;
        }

        .box .header {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            font-size: 2em;
        }
        .box .divider {
            width: 100%;
            height: 2px;
            background-color: white;
            margin: 20px 0;
        }
        .box .content {
            font-size: 2em;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .box .icon i,
        .box .icon img {
            height: 1em;
            width: auto;
            vertical-align: middle;
        }
        
        
        @media (max-width: 430px) {
            .container { flex-direction: column; gap: 40px; padding: 40px; }
            .box { font-size: 2em; padding: 30px; }
        }

        .sidebar {
            width: 80px;
            background-color: #252525;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 10px;
        }

        .battery-icon {
            padding: 20px;
            font-size: 40px; /* Adjust font size for better visibility */
            width: auto;
            vertical-align: middle;
            margin: 0; /* Remove margin */
            text-align: center; /* Center the icon horizontally */
            align-self: flex-start; /* Align it at the top */
            display: flex;
            justify-content: center; /* Center the icon horizontally */
        }

        #toggleButton {
            width: 70%;  /* Narrow width */
            height: 30%; /* Increased height */
            font-size: 20px;
            font-weight: bold;
            border: none;
            border-radius: 30px;  /* Rounded corners */
            cursor: pointer;
            background-color: lightgreen;
            writing-mode: vertical-rl; /* Rotate text */
            text-orientation: mixed;  /* Ensure proper text orientation */
            display: flex;
            align-items: center;
            justify-content: center;
            text-transform: uppercase;
            transition: background-color 0.3s ease-in-out, transform 0.1s;
        }

        #sidebar_other_content {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #battery_container{
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .indicator {
            height: 100%;
            padding: 15px;
            aspect-ratio: 1;
            margin:2px;
            border-radius: 10px;
            background-color: rgb(111, 111, 111);
        }
        .indicator.active {
            background-color: #ff5252;
        }

    </style>
</head>
<body>
    <div class="container">
        <div class="column side">
            <div class="box">
                <div class="header">
                    <span class="title">Avstånd fram</span>
                    <span class="icon"><i class="fas fa-ruler"></i></span>
                </div>
                <span class="divider"></span>
                <div id="d_front" class="content">{{ data["d_front"] }}{% if data["d_front"] != '-' %} m{% endif %}</div>
            </div>
            <div class="box">
                <div class="header">
                    <span class="title">Avstånd Nära</span>
                    <span class="icon"><i class="fas fa-ruler"></i></span>
                </div>
                <span class="divider"></span>
                <div id="d_close" class="content">{{ data["d_close"]}}{% if data["d_front"] != '-' %} m{% endif %}</div>
            </div>
            
        </div>
        <div class="column">
            <div class="box" id="ind_box">
                    {% for i in range(9) %}
                        <div class="indicator" id="box{{ i }}"></div>
                    {% endfor %}
                </div>
            </div>
        <div class="column middle">
            <div class="box" id="car_content">
                <canvas id="carCanvas"></canvas>  
            </div>
            
        </div>
        <div class="column side">
            <div class="box">
                <div class="header">
                    <span class="title">Antal Nu</span>
                    <span class="icon"><img src="{{ url_for('static', filename='cars_icon.png') }}" alt="Cars Icon" width="30"></span>
                </div>
                <span class="divider"></span>
                <div id="num_now" class="content">{{data["num_now"]}}</div>
            </div>
        <div class="box">
            <div class="header">
                <span class="title">Tid</span>
                <span class="icon"><i class="fa-regular fa-clock"></i></span>
            </div>
            <span class="divider"></span>
            <div id="time" class="content">{{ data["time"] }}</div>
        </div>
    </div>
</div>
<div class="sidebar">
    <!-- Battery Icon -->
     <div id="battery_container">
        <div id="batteryIcon" class="battery-icon">
            <i class="fas fa-battery-full"></i> <!-- Default icon -->
        </div>
    </div>
    <div id='sidebar_other_content'>
        <button id="toggleButton" onclick="toggleButton_f()" data-state="start">Start</button>
    </div>
</div>
<button onclick="updateStatus(8)">Test Indicators</button>
</body>