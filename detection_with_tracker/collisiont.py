from collections import deque
import numpy as np
# look into: https://chatgpt.com/share/67969aa3-53f8-8001-9db8-5b45fd5beef9

s2 = deque([2.503267471866802, 2.5125897489965365, 2.5187388304371248, 2.5176796535222885, 2.52109812590252, 2.5291431364729795, 2.5225594663215425, 2.5368900906060716, 2.542958822023699, 2.5518774666321664, 2.5568334914526427, 2.568710180311515, 2.591680816023493, 2.616033530703213, 2.6077451320163787, 2.6558420067946806, 2.626110523447077, 2.7878360409636866, 2.8212702698511634, 2.9269064324634915])
t2 = deque([14.93465781211853, 14.983630418777466, 15.031429529190063, 15.07831335067749, 15.12585186958313, 15.173230409622192, 15.221158742904663, 15.26902985572815, 15.316233158111572, 15.363252878189087, 15.409212589263916, 15.493715524673462, 15.744398355484009, 15.793551921844482, 15.880655765533447, 16.023854970932007, 16.25991940498352, 16.948331356048584, 16.99699306488037, 17.3432354927063])

s8 = deque([1.180001353308476, 1.1791379657747396, 1.1695980588985508, 1.1557191701141583, 1.1454137626164271, 1.1537147987536163, 1.1557459070499225, 1.149443335886563, 1.099832350331776, 1.0980822717447558, 1.1024486093742665, 1.0971470046239735, 1.0978695395840024, 1.059952642673923, 1.0527267771662963, 1.04654727373646, 1.045625671599644, 1.0457119635949335, 1.0598623257541577, 1.2115571720655856])
t8 = deque([17.523476600646973, 17.568540573120117, 17.614941120147705, 17.664422035217285, 17.70947551727295, 17.75967526435852, 17.80578112602234, 17.850537538528442, 17.89599919319153, 17.942594528198242, 17.991590976715088, 18.038654804229736, 18.085050106048584, 18.132141590118408, 18.383930206298828, 18.549413919448853, 18.875269412994385, 19.003410816192627, 19.08923602104187, 19.739616870880127])

s14 = deque([3.5730248945506347, 3.5960351175304446, 3.5778543198751978, 3.5436986147252343, 3.4779369470541512, 3.4858238674221473, 3.392082476131694, 3.36418562598596, 3.3000681417445747, 3.2988089081427945, 3.2376479587568077, 3.245524313017992, 3.211885378943419, 3.208476696244699, 3.1869594419884404, 3.1992323750444203, 3.1225454170059757, 3.1184314640441513, 3.1510518545785615, 3.1184362506916883])
t14 = deque([10.231421709060669, 10.278669595718384, 10.37704586982727, 10.424573183059692, 10.471928358078003, 10.519058227539062, 10.569148778915405, 10.615509033203125, 10.665026664733887, 10.715932369232178, 10.857682228088379, 10.906960487365723, 10.95359492301941, 11.187206268310547, 11.341896295547485, 11.388872385025024, 11.531938552856445, 11.578141689300537, 11.626359462738037, 11.674144268035889])

import numpy as np
import matplotlib.pyplot as plt

# Linjär modell
def linear_model(time, distance):
    coeffs = np.polyfit(time, distance, 1)  # Linjär regression (grad 1)
    slope, intercept = coeffs
    t_zero = -intercept / slope if slope != 0 else None
    return t_zero, coeffs

# Kvadratisk modell (för konstant acceleration)
def quadratic_model(time, distance):
    coeffs = np.polyfit(time, distance, 2)  # Kvadratisk regression (grad 2)
    a, b, c = coeffs
    discriminant = b**2 - 4 * a * c
    t_zero = (-b + np.sqrt(discriminant)) / (2 * a) if discriminant >= 0 else None
    return t_zero, coeffs

# Funktion för att plotta modeller
def plot_models(time, distance):
    plt.scatter(time, distance, color='black', label='Data (observationer)')

    # Linjär modell
    t_zero_linear, coeffs_linear = linear_model(time, distance)
    linear_fit = np.polyval(coeffs_linear, time)
    plt.plot(time, linear_fit, label='Linjär modell', linestyle='--')

    # Kvadratisk modell
    t_zero_quadratic, coeffs_quadratic = quadratic_model(time, distance)
    fine_time = np.linspace(min(time), max(time) + 2, 200)  # För smidig kurva
    quadratic_fit = np.polyval(coeffs_quadratic, fine_time)
    plt.plot(fine_time, quadratic_fit, label='Kvadratisk modell', linestyle='-.')

    # Märkning av tid när sträckan når 0
    if t_zero_linear is not None and t_zero_linear > 0:
        plt.axvline(t_zero_linear, color='blue', linestyle=':', label=f'Linjär t=0: {t_zero_linear:.2f}')
    if t_zero_quadratic is not None and t_zero_quadratic > 0:
        plt.axvline(t_zero_quadratic, color='green', linestyle=':', label=f'Kvadratisk t=0: {t_zero_quadratic:.2f}')

    # Anpassningar för plotten
    plt.xlabel('Tid')
    plt.ylabel('Sträcka')
    plt.title('Modellering av rörelse')
    plt.legend()
    plt.grid()
    plt.show()

# Exempeldata


# Använd plot-funktionen
plot_models(t14, s14)
